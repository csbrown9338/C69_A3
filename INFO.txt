Colleen Brown
brownc50

My choice for designing was having multiple small helper functions so I could start figuring out an algorithm, and then focus on implementation later.
I also elected to have ext2_helper do most of the work, and the other programs (i.e. ext2_ln, ext2_mkdir...) simply do the checks for the validity
of the paths and arguments. The only exception to this was ext2_ls since it was only reading, and not actually changing the disk.


General issues I had was wrapping my head around the structure. 
It took me about a week to somewhat grasp how the inodes and blocks interact with each other, and that the ext2_dir_entry_2 structures were interpreted
by the blocks at different offsets (depending on rec_len), and that specifically, only inodes that represent directories have these specific structures
in their blocks to begin with.
It also took me a while to realize that the pointers in the superblock, block group, and inode structures (to stuff like the inode table, or the bitmaps)
work like indices and you have to index through the blocks to find its address.

Aside from my inability to grasp the structure in a timely manner (and by consequence, delaying the actual coding), the majority of the issues I encountered
were related to the pickiness of the addresses (i.e. getting the address to the exact byte), which makes sense considering we are meant to be working with
memory. However, it has hindered my progress with several of the commands since it's difficult to pinpoint where in the code it failed to return the desired
address, and how the address was shifted in any way.


For all commands, functionalities (including helpers) I have completed (or at least I believe to be implemented properly):
    - The checks for the arguments
    - Checking the validity of a path
    - Checking if an inode points to a dir or not
    - Retrieving information from the superblock, block group, and inodes
    - Parsing through and changing the bitmaps
    - Retrieving an inode given its index
    - Extracting the ext2_dir_entry_2 structure from the blocks given the inode, block index, and position


For the specific commands, I have done the following:

ext2_ls:
    - Looping through the entries of a given directory and listing them
    - Printing out the name if it's not a directory
    - Displayed . and .. given the -a flag

ext2_cp:
    - Allocated an inode
    - Allocated up to 12 blocks

ext2_mkdir:
    - Allocating a new inode for directory
    - Allocating a block for the new directory
    - Allocating a place for the ext2_dir_entry_2 structure for the parent (..) after the new dir (.)

ext2_ln:
    - Allocating an inode for the link (if it's symbolic)
    - Allocating blocks

ext2_rm:
    - Nothing :(


Problems, bugs, or features I didn't implement, specific to each command:

ext2_ls:
    - Sometimes, after a series commands (i.e. ext2_mkdir, ext2_cp, or ext2_ln), ext2_ls will start to show strange characters (even while typing)
      which I am assuming to be an issue with overwriting or accessing something I was not supposed to. Unfortunately, I couldn't locate the issue

ext2_cp:
    - I did not start on anything related to indirect blocks, only direct
    - It's possible there was an overwriting/accessing issue, but I couldn't quite pinpoint that problem if it exists (I didn't spend too much
      time testing this command in particular)

ext2_mkdir:
    - In the parent directory, I did not allocate new blocks if previous block is full
    - Again, possibly an overwriting/accessing issue
    - The checks if the directory already exists have been commented out since my checks on its type weren't working as I intended

ext2_ln:
    - In my code, I have the checks to see if the name in the destination is already taken, however it's commented out (like in ext2_mkdir)
      This is because the checks for whether it's a file or directory were not working as intended
    - Possible overwriting/accessing issue (didn't test this command as much either)


There are also some things that I don't know if they work for specific commands:

ext2_cp:
    - I'm not sure if I copied the information correctly, or in the right spot (specifically, for anything that requires less than 12 blocks)

ext2_mkdir:
    - Adding an ext2_dir_entry_2 into the destination (not properly, but it's stored in there)